import os
import shutil
import subprocess

class ProkkaHandler:
    """
      Annotation Module

      Automates running prokka and run its on multiple files.
      Reads files from fasta_renamed (by default) and annotates them,
      storing the results in prokka_run_data.
      It also creates datasets to be used with PPanGGOLiN.

      Utlizes Prokka 1.14.6 by Torsten Seemann <torsten.seemann@gmail.com>
      to generate annotations.

      Log:
      ---
      Dec 27 2022 - SherwynBraganza31 - Creation
      Jan 8 2022 - SherwynBraganza31 - Revision of modules
      Jan 24 2022 - SherwynBraganza31 - More comments, revision of modules

      Attributes
      ----------
      parent_dir : str
          the parent directory
      fasta_dir : str
          the directory that contains the fasta files
      ppan_dir  : str
          directory where PPanGGOLiN data generated is going to be stored

      Methods
      -------
      createRunDataFolder(self)
          creates a directory to store all the prokka generated data.

      executeProkkaCalls(self)
          calls prokka on each of the files in the directory and
          stores their outputs in fasta_dir/

      createPPaNdataset(self)
          creates a datasets for smooth transition into using PPanGGOLiN.

      createPPaNListFile(sel , type)
          creates the .list files required by PPaNGGOLiN
    """

    def __init__(self, parent_dir: str, fasta_dir: str):
        """
            Create working directories, etc.

            Args:
                parent_dir: The parent directory (one step above fasta_dir)
                fasta_dir: The directory that contains all the fasta files that need to be
                            processed.

            Returns:
                None
        """
        self.parent_dir = parent_dir
        os.chdir(parent_dir)

        self.fasta_dir = fasta_dir
        self.fasta_files_list = os.listdir(self.fasta_dir)
        self.ppandir = self.parent_dir + '/ppan_dataset'

        self.createRunDataFolder()
        self.executeProkkaCalls()
        self.createPPaNdataset()

    def createRunDataFolder(self) -> None:
        """
            Create a folder in the parent_dir to store all the prokka run data obtained.

            Returns:
                None
        """
        cwd_list = os.listdir(self.parent_dir)
        if 'prokka_run_data' in cwd_list:
            pass
        else:
            os.mkdir('prokka_run_data')

    def executeProkkaCalls(self):
        """
            Run prokka to annotate the fasta files. Run data is stored in the <run_data_foleder>.

            current run command = prokka --outdir prokka_run_data/<filename>/ --genus geobacillus
                                    --kingdom Bacteria

            TODO: Extract run command params from fasta files

            Returns:
                None
        """
        # for each of the files, execute a python subprocess
        for filename in self.fasta_files_list:
            print(f'Running prokka on {filename}')
            subprocess.run('prokka ' +
                           '--outdir ' +
                           'prokka_run_data/' + filename[0:filename.index('.')] + '/' +
                           ' --genus ' +
                           'geobacillus ' +
                           '--kingdom ' +
                           'Bacteria ' +
                           self.fasta_dir + filename +
                           ' --force', shell=True)

    def createPPaNdataset(self):
        """
            Sift through run data generated by prokka and create datasets to be fed into
            PPanGGoLiN.

            Creates a directory, ppan_dataset, with the following subdirectories:
                - FNA = directory with all the FASTA format files for each bacteria
                - GFF = directory with all the .gff files received after running prokka

            Returns:
                None

        """
        # do a clean create
        if os.path.exists(self.ppandir):
            shutil.rmtree(self.ppandir)

        os.mkdir(self.ppandir)
        os.mkdir(self.ppandir + '/GFF')
        tag_name = os.listdir('prokka_run_data/' +
                              os.listdir('prokka_run_data/')[0])[0][0:-4]

        for file in os.listdir('prokka_run_data/'):
            shutil.copy(src='prokka_run_data/' + file + '/' + tag_name + '.gff',
                        dst=self.ppandir + '/GFF')
            shutil.move(src=self.ppandir + '/GFF/' + tag_name + '.gff',
                        dst=self.ppandir + '/GFF/' + file + '.gff')

        shutil.copytree(src=self.fasta_dir, dst=self.ppandir + '/FNA')

        self.createPPaNListFile(0)
        self.createPPaNListFile(1)

    def createPPaNListFile(self, file_type):
        """
          Creates the organisms.fasta.list file or organisms.gff.list file needed
          to run PPaNGGOLiN.

          @params
              file_type: int
                  specify whether you want to create a fasta.list or gff.list file

          @returns
              None
        """
        dir = '/FNA' if file_type == 0 else '/GFF'
        core_filename = 'organisms.fasta.list' if file_type == 0 \
            else 'organisms.gff.list'

        dir_file_list = os.listdir(self.ppandir + dir)
        outfile = open(self.ppandir + '/' + core_filename, 'w')
        for x in dir_file_list:
            outfile.write(x[0:x.index('.')] + '\t' + dir[1:] + '/' + x + '\n')
        outfile.close()


if __name__ == "__main__":
    parent_dir = input("Enter in the parent_dir: ")
    parent_dir = parent_dir if "/" == parent_dir[-1] else parent_dir + "/"
    temp = ProkkaHandler(parent_dir=parent_dir, fasta_dir=parent_dir + "prepped_fasta/")